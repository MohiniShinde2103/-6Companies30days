/*Problem Statement
M items are to be delivered in a circle of size N.
Find the position where the M-th item will be delivered if we start from a given position K. 
Note that items are distributed at adjacent positions starting from K.*/

/*
Input:
N = 5, M = 2, K = 1
Output:
2
*/


import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            String S[] = read.readLine().split(" ");
            
            int N = Integer.parseInt(S[0]);
            int M = Integer.parseInt(S[1]);
            int K = Integer.parseInt(S[2]);
            
            Solution ob = new Solution();
            System.out.println(ob.findPosition(N,M,K));
        }
    }
}

class Solution {
    static int findPosition(int N , int M , int K) {
       
        if (M <= N - K + 1)
            return M + K - 1;
            
        M -= (N - K + 1);
        
        if (M % N == 0)
            return N;
        else
            return (M % N);
    }
};
