/*
You may recall that an array arr is a mountain array if and only if:

arr.length >= 3
There exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given an integer array arr, return the length of the longest subarray, which is a mountain. Return 0 if there is no mountain subarray.
*/

/*
Input: arr = [2,1,4,7,3,2,5]
Output: 5

Input: arr = [2,2,2]
Output: 0
*/

class Solution {
    public int longestMountain(int[] arr) {
        if(arr.length<3) return 0;
        int n=arr.length,result=0,i=0;
        while(i<n)
        {
            int base=i;
            while(i+1<n && arr[i]<arr[i+1])
                i++;
            if(i==base)
            {    
                i++;
                continue;
            }
            int peak=i;
            while(i+1<n && arr[i]>arr[i+1])
                i++;
            if(i==peak)
            {   
                i++;
                continue;
            }
            ans=Math.max(result,i-base+1);
        }
        return result;
    }
}
