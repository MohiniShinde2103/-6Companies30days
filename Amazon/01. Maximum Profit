/* Problem Statement
In the stock market, a person buys a stock and sells it on some future date.
Given the stock prices of N days in an array A[ ] and a positive integer K, find out the maximum profit a person can make in at-most K transactions. 
A transaction is equivalent to (buying + selling) of a stock and new transaction can start only when the previous transaction has been completed.
*/

/*
Input: K = 2, N = 6
A = {10, 22, 5, 75, 65, 80}
Output: 87

Input: K = 3, N = 4
A = {20, 580, 420, 900}
Output: 1040
*/

class Solution {
    static int maxProfit(int k, int n, int A[]) {
        // code here
        int dp[][]=new int[k+1][n];
        int max_so=Integer.MIN_VALUE;
        for(int i=1;i<=k;i++)
        {
            max_so=Integer.MIN_VALUE;
            for(int j=1;j<n;j++)
            {
                max_so=Math.max(max_so,dp[i-1][j-1]-A[j-1]);
                dp[i][j]=Math.max(dp[i][j-1],max_so+A[j]);
            }
        }
        return dp[k][n-1];
    }
}
